{"version":3,"sources":["components/movie-card/movie-card.component.jsx","components/movie-list/movie-list.component.jsx","components/now-playing/now.component.jsx","components/upcoming-movies/upcoming.component.jsx","components/popular-movies/poplular.component.jsx","pages/movies/moviesPage.jsx","pages/detail/detail.jsx","components/nav/nav.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","year","movie","release_date","split","className","to","pathname","state","src","poster_path","vote_average","original_title","MovieList","movies","map","m","key","id","NowPlaying","UpcomingMovies","PopularMovies","MoviesPage","data","now_playing_movies","upcoming_movies","popular_movies","API_KEY","process","Detail","movie_info","video_info","release_year","runtime_hour","runtime_min","genres","video_key","openTab","tabName","gridContent","document","querySelectorAll","i","length","classList","remove","getElementById","add","addDefaultSrc","e","target","this","setState","movie_id","location","Promise","all","fetch","then","json","allResponses","console","log","runtime","hour","Math","floor","min","g","name","results","style","marginTop","join","href","imdb_id","overview","onClick","parentNode","lastChild","firstChild","width","height","production_companies","c","logo_path","onError","React","Component","handleClick","elems","querySelector","Nav","App","showMoviePage","path","component","exact","showTvPage","showSearchPage","DetailPage","showNotFound","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d98da29.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./movie-card.style.css\";\n\nconst MovieCard = (props) => {\n  const year = props.movie.release_date.split(\"-\", 1);\n  // console.log(\"MovieCard: \", props.movie);\n  return (\n    <div>\n      <div className=\"image-container\">\n        <Link\n          to={{\n            pathname: \"/detail\",\n            state: { movie: props.movie },\n          }}\n        >\n          <img\n            className=\"poster\"\n            src={`https://image.tmdb.org/t/p/w200/${props.movie.poster_path}`}\n          />\n          <span className=\"rate\">\n            <span className=\"star-icon\">&#9733;</span>{\" \"}\n            {props.movie.vote_average}\n            /10\n          </span>\n        </Link>\n      </div>\n      <div className=\"info\">\n        <span className=\"title\">{props.movie.original_title}</span>\n        <span className=\"year\">{year}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import React from \"react\";\nimport MovieCard from \"../movie-card/movie-card.component\";\n\nimport \"./movie-list.style.css\";\n\nconst MovieList = (props) => {\n  return (\n    <div className=\"movie-list\">\n      {props.movies.map((m) => {\n        return <MovieCard key={m.id} movie={m} />;\n      })}\n    </div>\n  );\n};\n\nexport default MovieList;\n","import React from \"react\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\nimport \"./now.style.css\";\n\nconst NowPlaying = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Now Playing</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\nexport default NowPlaying;\n","import React from \"react\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\n// import \"./upcoming.style.css\";\nimport \"../now-playing/now.style.css\";\n\nconst UpcomingMovies = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Upcoming Movies</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\nexport default UpcomingMovies;\n","import React from \"react\";\nimport \"../now-playing/now.style.css\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\nconst PopularMovies = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Popular Movies</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\n\nexport default PopularMovies;\n","import React from \"react\";\nimport NowPlaying from \"../../components/now-playing/now.component\";\nimport UpcomingMovies from \"../../components/upcoming-movies/upcoming.component\";\nimport PopularMovies from \"../../components/popular-movies/poplular.component\";\n\nconst MoviesPage = (props) => {\n  return (\n    <div>\n      <NowPlaying movies={props.data.now_playing_movies} />\n      <UpcomingMovies movies={props.data.upcoming_movies} />\n      <PopularMovies movies={props.data.popular_movies} />\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import React from \"react\";\nimport \"./detail.css\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass Detail extends React.Component {\n  constructor() {\n    super();\n  }\n\n  state = {\n    id: \"\",\n    movie_info: {},\n    video_info: {},\n    release_year: \"\",\n    runtime_hour: 0,\n    runtime_min: 0,\n    genres: [],\n    video_key: \"\",\n  };\n\n  componentDidMount() {\n    this.setState(\n      {\n        movie_id: this.props.location.state.movie.id,\n      },\n      () => {\n        Promise.all([\n          // For movie info\n          fetch(\n            `https://api.themoviedb.org/3/movie/${this.state.movie_id}?api_key=${API_KEY}&language=en-US`\n          ).then((data) => data.json()),\n          // For video teaser\n          fetch(\n            `http://api.themoviedb.org/3/movie/${this.state.movie_id}/videos?api_key=${API_KEY}&language=en-US`\n          ).then((data) => data.json()),\n        ]).then((allResponses) =>\n          this.setState(\n            {\n              movie_info: allResponses[0],\n              video_info: allResponses[1],\n            },\n            () => {\n              console.log(\"after fetched, movie_info: \", this.state.movie_info);\n              console.log(\"after fetched, video_info: \", this.state.video_info);\n\n              // Handle runtime format\n              const runtime_min = this.state.movie_info.runtime;\n              let hour = Math.floor(runtime_min / 60);\n              let min = Math.floor(runtime_min % 60);\n\n              // Handle genres\n              let genres = [];\n\n              genres = this.state.movie_info.genres.map((g) => {\n                return g.name;\n              });\n\n              // Update state\n              this.setState({\n                release_year: this.state.movie_info.release_date.split(\"-\", 1),\n                runtime_hour: hour,\n                runtime_min: min,\n                genres: genres,\n                video_key: this.state.video_info.results[0].key,\n              });\n            }\n          )\n        );\n      }\n    );\n  }\n\n  openTab = (tabName) => {\n    const gridContent = document.querySelectorAll(\".detail_grid_content\");\n\n    // Handle contents\n    for (let i = 0; i < gridContent.length; i++) {\n      gridContent[i].classList.remove(\"show\");\n    }\n    document.getElementById(tabName).classList.add(\"show\");\n  };\n\n  addDefaultSrc = (e) => {\n    e.target.src =\n      \"https://dummyimage.com/600x400/000/ffffff.png&text=Image+Not+Found\";\n  };\n  render() {\n    return (\n      <div\n        style={{\n          marginTop: \"50px\",\n        }}\n        className=\"detail_container\"\n      >\n        <div className=\"detail_poster_container\">\n          <div className=\"detail_poster_inner_container\">\n            <img\n              src={`https://image.tmdb.org/t/p/original/${this.state.movie_info.poster_path}`}\n              className=\"detail_poster\"\n            />\n          </div>\n        </div>\n        <div className=\"detail_main_container\">\n          <div className=\"detail_main_inner_container\">\n            <div className=\"detail_info\">\n              <h2>{this.state.movie_info.original_title}</h2>\n              <div className=\"detail_sub_info\">\n                {this.state.release_year} &bull; {this.state.runtime_hour}\n                {\"hr \"}\n                {this.state.runtime_min}\n                {\"mins \"}\n                &bull; {this.state.genres.join(\" / \")} &bull;{\" \"}\n                <button className=\"detail_button\">\n                  <a\n                    href={`https://www.imdb.com/title/${this.state.movie_info.imdb_id}`}\n                    target=\"_blank\"\n                  >\n                    IMDB\n                  </a>\n                </button>\n              </div>\n              <div className=\"detail_overview\">\n                <p>{this.state.movie_info.overview}</p>\n              </div>\n              <div className=\"detail_grid_container\">\n                {/* Two columns */}\n                <div className=\"detail_tab_row\">\n                  <div\n                    className=\"detail_tab_col show\"\n                    onClick={(e) => {\n                      this.openTab(\"b1\");\n                      e.target.parentNode.lastChild.classList.remove(\"show\");\n                      e.target.classList.add(\"show\");\n                    }}\n                  >\n                    Video\n                  </div>\n                  <div\n                    className=\"detail_tab_col\"\n                    onClick={(e) => {\n                      this.openTab(\"b2\");\n                      e.target.parentNode.firstChild.classList.remove(\"show\");\n                      e.target.classList.add(\"show\");\n                    }}\n                  >\n                    Production\n                  </div>\n                </div>\n                <div className=\"detail_grid_content show\" id=\"b1\">\n                  <h2>Teaser videos...</h2>\n                  <iframe\n                    width=\"500\"\n                    height=\"300\"\n                    src={`https://www.youtube.com/embed/${this.state.video_key}`}\n                  ></iframe>\n                </div>\n                <div className=\"detail_grid_content\" id=\"b2\">\n                  <div className=\"detail_company_container\">\n                    <h2>Companies...</h2>\n                    <div className=\"detail_companies\">\n                      {this.state.movie_info.production_companies &&\n                        this.state.movie_info.production_companies.map((c) => {\n                          return (\n                            <div className=\"detail_company\">\n                              <div className=\"detail_logo_container\">\n                                <img\n                                  src={`https://image.tmdb.org/t/p/original/${c.logo_path}`}\n                                  onError={this.addDefaultSrc}\n                                  // onError=\"this.onerror=null; this.src='https://dummyimage.com/600x400/000/ffffff.png&text=Image+Not+Found'\"\n                                  className=\"detail_logo\"\n                                />\n                              </div>\n                              <p className=\"detail_company_name\">{c.name}</p>\n                            </div>\n                          );\n                        })}\n                    </div>\n                  </div>\n                  <div className=\"detail_country\">\n                    <h2>Countries...</h2>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Detail;\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\nimport \"./nav.style.css\";\n\nconst handleClick = (e) => {\n  const elems = document.querySelector(\".activated\");\n\n  // Remove classname from the activated element\n  if (elems !== null) {\n    elems.classList.remove(\"activated\");\n  }\n  e.target.classList.add(\"activated\");\n};\nconst Nav = () => {\n  return (\n    <header className=\"list-container\" onClick={handleClick}>\n      <ul className=\"ul\">\n        <li>\n          <Link to=\"/netflix_clone/\" className=\"activated\">\n            Movies\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/netflix_clone/tv\">TV</Link>\n        </li>\n        <li>\n          <Link to=\"/netflix_clone/search\">Search</Link>\n        </li>\n      </ul>\n    </header>\n  );\n};\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport MoviesPage from \"./pages/movies/moviesPage\";\nimport DetailPage from \"./pages/detail/detail\";\nimport Nav from \"./components/nav/nav.component\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      now_playing_movies: [],\n      upcoming_movies: [],\n      popular_movies: [],\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch(\n        `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/movie/upcoming?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n    ]).then((allResponses) => {\n      this.setState({\n        now_playing_movies: allResponses[0].results,\n        upcoming_movies: allResponses[1].results,\n        popular_movies: allResponses[2].results,\n      });\n    });\n  }\n\n  showMoviePage = () => {\n    return <MoviesPage data={this.state} />;\n  };\n\n  showTvPage() {\n    return <h1 className=\"temp-text\">TV Page coming soon...</h1>;\n  }\n\n  showSearchPage() {\n    return <h1 className=\"temp-text\">Search Page coming soon...</h1>;\n  }\n\n  // showDetail() {\n  //   return <DetailPage />;\n  // }\n\n  showNotFound() {\n    console.log(\"not found called\");\n    return <h1 className=\"temp-text\">404 Page</h1>;\n  }\n\n  render() {\n    // const { now_playing_movies, upcoming_movies, popular_movies } = this.state;\n    return (\n      <div className=\"App\">\n        <Router>\n          <Nav></Nav>\n          <Switch>\n            <Route\n              path=\"/netflix_clone/\"\n              component={this.showMoviePage}\n              exact={true}\n            />\n            <Route path=\"/netflix_clone/tv\" component={this.showTvPage} />\n            <Route\n              path=\"/netflix_clone/search\"\n              component={this.showSearchPage}\n            />\n            <Route path=\"/detail\" component={DetailPage} />\n            <Route component={this.showNotFound} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}