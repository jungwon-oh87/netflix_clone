{"version":3,"sources":["components/nav/nav.component.jsx","components/movie-card/movie-card.component.jsx","components/movie-list/movie-list.component.jsx","components/now-playing/now.component.jsx","components/upcoming-movies/upcoming.component.jsx","components/popular-movies/poplular.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","className","onClick","e","Array","from","target","parentElement","children","forEach","list","classList","contains","remove","add","href","MovieCard","props","year","movie","release_date","split","console","log","src","poster_path","original_title","MovieList","movies","map","m","key","id","NowPlaying","UpcomingMovies","PopularMovies","API_KEY","process","App","state","now_playing_movies","upcoming_movies","popular_movies","Promise","all","fetch","then","data","json","allResponses","setState","results","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mVAIaA,G,YAAM,WAWjB,OACE,yBAAKC,UAAU,iBAAiBC,QAXlC,SAAqBC,GACDC,MAAMC,KAAKF,EAAEG,OAAOC,cAAcC,UAC1CC,SAAQ,SAACC,GACbA,EAAKC,UAAUC,SAAS,cAC1BF,EAAKC,UAAUE,OAAO,gBAG1BV,EAAEG,OAAOK,UAAUG,IAAI,eAKrB,wBAAIb,UAAU,MACZ,wBAAIA,UAAU,aACZ,uBAAGc,KAAK,KAAR,WAEF,4BACE,uBAAGA,KAAK,KAAR,OAEF,4BACE,uBAAGA,KAAK,KAAR,eCHKC,G,MAlBG,SAACC,GACjB,IAAMC,EAAOD,EAAME,MAAMC,aAAaC,MAAM,IAAK,GAEjD,OADAC,QAAQC,IAAIL,GAEV,6BACE,yBAAKjB,UAAU,mBACb,yBACEuB,IAAG,0CAAqCP,EAAME,MAAMM,gBAGxD,yBAAKxB,UAAU,QACb,0BAAMA,UAAU,SAASgB,EAAME,MAAMO,gBACrC,0BAAMzB,UAAU,QAAQiB,OCDjBS,G,MAVG,SAACV,GACjB,OACE,yBAAKhB,UAAU,cACZgB,EAAMW,OAAOC,KAAI,SAACC,GACjB,OAAO,kBAAC,EAAD,CAAWC,IAAKD,EAAEE,GAAIb,MAAOW,UCM7BG,G,KAVI,SAAChB,GAClB,OACE,yBAAKhB,UAAU,aACb,2CACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAW2B,OAAQX,EAAMW,aCMlBM,EAVQ,SAACjB,GACtB,OACE,yBAAKhB,UAAU,aACb,+CACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAW2B,OAAQX,EAAMW,YCIlBO,EAXO,SAAClB,GACrB,OACE,yBAAKhB,UAAU,aACb,8CACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,CAAW2B,OAAQX,EAAMW,YCD3BQ,EAAUC,mCAqDDC,E,kDAlDb,WAAYrB,GAAQ,IAAD,8BACjB,gBACKsB,MAAQ,CACXC,mBAAoB,GACpBC,gBAAiB,GACjBC,eAAgB,IALD,E,gEASE,IAAD,OAClBC,QAAQC,IAAI,CACVC,MAAM,0DAAD,OACuDT,IAC1DU,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACtBH,MAAM,uDAAD,OACoDT,IACvDU,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACtBH,MAAM,sDAAD,OACmDT,IACtDU,MAAK,SAACC,GAAD,OAAUA,EAAKC,YACrBF,MAAK,SAACG,GACP,EAAKC,SACH,CACEV,mBAAoBS,EAAa,GAAGE,QACpCV,gBAAiBQ,EAAa,GAAGE,QACjCT,eAAgBO,EAAa,GAAGE,UAElC,WACE7B,QAAQC,IACN,uCACA,EAAKgB,MAAMG,wB,+BAOX,IAAD,EACyDU,KAAKb,MAA7DC,EADD,EACCA,mBAAoBC,EADrB,EACqBA,gBAAiBC,EADtC,EACsCA,eAC7C,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAY2B,OAAQY,IACpB,kBAAC,EAAD,CAAgBZ,OAAQa,IACxB,kBAAC,EAAD,CAAeb,OAAQc,S,GA7CbW,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.571d78b5.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./nav.style.css\";\n\nexport const Nav = () => {\n  function handleClick(e) {\n    const listArray = Array.from(e.target.parentElement.children);\n    listArray.forEach((list) => {\n      if (list.classList.contains(\"activated\")) {\n        list.classList.remove(\"activated\");\n      }\n    });\n    e.target.classList.add(\"activated\");\n  }\n\n  return (\n    <div className=\"list-container\" onClick={handleClick}>\n      <ul className=\"ul\">\n        <li className=\"activated\">\n          <a href=\"#\">Movies</a>\n        </li>\n        <li>\n          <a href=\"#\">TV</a>\n        </li>\n        <li>\n          <a href=\"#\">Search</a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./movie-card.style.css\";\n\nconst MovieCard = (props) => {\n  const year = props.movie.release_date.split(\"-\", 1);\n  console.log(year);\n  return (\n    <div>\n      <div className=\"image-container\">\n        <img\n          src={`https://image.tmdb.org/t/p/w200/${props.movie.poster_path}`}\n        />\n      </div>\n      <div className=\"info\">\n        <span className=\"title\">{props.movie.original_title}</span>\n        <span className=\"year\">{year}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import React from \"react\";\nimport MovieCard from \"../movie-card/movie-card.component\";\n\nimport \"./movie-list.style.css\";\n\nconst MovieList = (props) => {\n  return (\n    <div className=\"movie-list\">\n      {props.movies.map((m) => {\n        return <MovieCard key={m.id} movie={m} />;\n      })}\n    </div>\n  );\n};\n\nexport default MovieList;\n","import React from \"react\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\nimport \"./now.style.css\";\n\nconst NowPlaying = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Now Playing</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\nexport default NowPlaying;\n","import React from \"react\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\n// import \"./upcoming.style.css\";\nimport \"../now-playing/now.style.css\";\n\nconst UpcomingMovies = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Upcoming Movies</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\nexport default UpcomingMovies;\n","import React from \"react\";\nimport \"../now-playing/now.style.css\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\nconst PopularMovies = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Popular Movies</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\n\nexport default PopularMovies;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { Nav } from \"./components/nav/nav.component\";\nimport NowPlaying from \"./components/now-playing/now.component\";\nimport UpcomingMovies from \"./components/upcoming-movies/upcoming.component\";\nimport PopularMovies from \"./components/popular-movies/poplular.component\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      now_playing_movies: [],\n      upcoming_movies: [],\n      popular_movies: [],\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch(\n        `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/movie/upcoming?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n    ]).then((allResponses) => {\n      this.setState(\n        {\n          now_playing_movies: allResponses[0].results,\n          upcoming_movies: allResponses[1].results,\n          popular_movies: allResponses[2].results,\n        },\n        () => {\n          console.log(\n            \"after fetched, only popular movies: \",\n            this.state.popular_movies\n          );\n        }\n      );\n    });\n  }\n\n  render() {\n    const { now_playing_movies, upcoming_movies, popular_movies } = this.state;\n    return (\n      <div className=\"App\">\n        <Nav></Nav>\n        <NowPlaying movies={now_playing_movies} />\n        <UpcomingMovies movies={upcoming_movies} />\n        <PopularMovies movies={popular_movies} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}