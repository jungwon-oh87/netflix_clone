{"version":3,"sources":["components/movie-card/movie-card.component.jsx","components/movie-list/movie-list.component.jsx","components/upcoming-movies/upcoming.component.jsx","components/now-playing/now.component.jsx","components/popular-movies/poplular.component.jsx","pages/movies/moviesPage.jsx","components/nav/nav.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","year","movie","release_date","split","className","src","poster_path","vote_average","original_title","MovieList","movies","map","m","key","id","UpcomingMovies","NowPlaying","PopularMovies","MoviesPage","data","now_playing_movies","upcoming_movies","popular_movies","handleClick","e","elems","document","querySelector","classList","remove","target","add","Nav","onClick","to","API_KEY","process","App","showMoviePage","state","Promise","all","fetch","then","json","allResponses","setState","results","console","log","path","component","this","exact","showTvPage","showSearchPage","showNotFound","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e946a96a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./movie-card.style.css\";\n\nconst MovieCard = (props) => {\n  const year = props.movie.release_date.split(\"-\", 1);\n  // console.log(year);\n  return (\n    <div>\n      <div className=\"image-container\">\n        <img\n          src={`https://image.tmdb.org/t/p/w200/${props.movie.poster_path}`}\n        />\n        <span className=\"rate\">\n          <span className=\"star-icon\">&#9733;</span> {props.movie.vote_average}\n          /10\n        </span>\n      </div>\n      <div className=\"info\">\n        <span className=\"title\">{props.movie.original_title}</span>\n        <span className=\"year\">{year}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import React from \"react\";\nimport MovieCard from \"../movie-card/movie-card.component\";\n\nimport \"./movie-list.style.css\";\n\nconst MovieList = (props) => {\n  return (\n    <div className=\"movie-list\">\n      {props.movies.map((m) => {\n        return <MovieCard key={m.id} movie={m} />;\n      })}\n    </div>\n  );\n};\n\nexport default MovieList;\n","import React from \"react\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\n// import \"./upcoming.style.css\";\nimport \"../now-playing/now.style.css\";\n\nconst UpcomingMovies = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Upcoming Movies</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\nexport default UpcomingMovies;\n","import React from \"react\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\nimport \"./now.style.css\";\n\nconst NowPlaying = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Now Playing</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\nexport default NowPlaying;\n","import React from \"react\";\nimport \"../now-playing/now.style.css\";\nimport MovieList from \"../movie-list/movie-list.component\";\n\nconst PopularMovies = (props) => {\n  return (\n    <div className=\"container\">\n      <h2>Popular Movies</h2>\n      <div className=\"content\">\n        <MovieList movies={props.movies} />\n      </div>\n    </div>\n  );\n};\n\nexport default PopularMovies;\n","import React from \"react\";\nimport NowPlaying from \"../../components/upcoming-movies/upcoming.component\";\nimport UpcomingMovies from \"../../components/now-playing/now.component\";\nimport PopularMovies from \"../../components/popular-movies/poplular.component\";\n\nconst MoviesPage = (props) => {\n  return (\n    <div>\n      <NowPlaying movies={props.data.now_playing_movies} />\n      <UpcomingMovies movies={props.data.upcoming_movies} />\n      <PopularMovies movies={props.data.popular_movies} />\n    </div>\n  );\n};\n\nexport default MoviesPage;\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\nimport \"./nav.style.css\";\n\nconst handleClick = (e) => {\n  const elems = document.querySelector(\".activated\");\n\n  // Remove classname from the activated element\n  if (elems !== null) {\n    elems.classList.remove(\"activated\");\n  }\n  e.target.classList.add(\"activated\");\n};\nconst Nav = () => {\n  return (\n    <header className=\"list-container\" onClick={handleClick}>\n      <ul className=\"ul\">\n        <li>\n          <Link to=\"/netflix_clone/\" className=\"activated\">\n            Movies\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/netflix_clone/tv\">TV</Link>\n        </li>\n        <li>\n          <Link to=\"/netflix_clone/search\">Search</Link>\n        </li>\n      </ul>\n    </header>\n  );\n};\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport MoviesPage from \"./pages/movies/moviesPage\";\nimport Nav from \"./components/nav/nav.component\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      now_playing_movies: [],\n      upcoming_movies: [],\n      popular_movies: [],\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch(\n        `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/movie/upcoming?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n    ]).then((allResponses) => {\n      this.setState(\n        {\n          now_playing_movies: allResponses[0].results,\n          upcoming_movies: allResponses[1].results,\n          popular_movies: allResponses[2].results,\n        },\n        () => {\n          console.log(\n            \"after fetched, only popular movies: \",\n            this.state.popular_movies\n          );\n        }\n      );\n    });\n  }\n\n  showMoviePage = () => {\n    return <MoviesPage data={this.state} />;\n  };\n\n  showTvPage() {\n    return <h1 className=\"temp-text\">TV Page coming soon...</h1>;\n  }\n\n  showSearchPage() {\n    return <h1 className=\"temp-text\">Search Page coming soon...</h1>;\n  }\n\n  showNotFound() {\n    console.log(\"not found called\");\n    return <h1 className=\"temp-text\">404 Page</h1>;\n  }\n\n  render() {\n    // const { now_playing_movies, upcoming_movies, popular_movies } = this.state;\n    return (\n      <div className=\"App\">\n        <Router>\n          <Nav></Nav>\n          <Switch>\n            <Route\n              path=\"/netflix_clone/\"\n              component={this.showMoviePage}\n              exact={true}\n            />\n            <Route path=\"/netflix_clone/tv\" component={this.showTvPage} />\n            <Route\n              path=\"/netflix_clone/search\"\n              component={this.showSearchPage}\n            />\n            <Route component={this.showNotFound} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}