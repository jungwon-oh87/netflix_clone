{"version":3,"sources":["components/card/card.component.jsx","components/list/list.component.jsx","components/section/section.component.jsx","pages/movies/moviesPage.jsx","pages/detail/detail.jsx","pages/tv/tvPage.jsx","components/nav/nav.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","year","category","data","release_date","split","first_air_date","className","to","pathname","state","src","poster_path","vote_average","original_title","original_name","List","map","d","key","id","Section","title","MoviesPage","now_playing_movies","upcoming_movies","popular_movies","API_KEY","process","Detail","info","video_info","runtime_hr","runtime_min","genres","video_key","countries","openTab","tabName","gridContent","document","querySelectorAll","i","length","classList","remove","getElementById","add","addDefaultSrc","e","target","this","location","console","log","setState","Promise","all","fetch","then","json","allResponses","total_runtime_min","runtime","production_countries","forEach","c","push","iso_3166_1","episode_run_time","origin_country","g","name","results","hour","Math","floor","min","style","marginTop","href","imdb_id","overview","onClick","parentNode","lastChild","firstChild","width","height","production_companies","logo_path","onError","alt","React","Component","TvPage","air_tv","top_rated_tv","popular_tv","handleClick","elems","querySelector","Nav","App","showMoviePage","showTvPage","path","component","exact","showSearchPage","DetailPage","showNotFound","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5af3c767.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./card.styles.css\";\n\nconst Card = (props) => {\n  let year;\n\n  if (props.category === \"movie\") {\n    year = props.data.release_date.split(\"-\", 1);\n  }\n\n  if (props.category === \"tv\") {\n    year = props.data.first_air_date.split(\"-\", 1);\n  }\n\n  return (\n    <div>\n      <div className=\"image-container\">\n        <Link\n          to={{\n            pathname: \"/detail\",\n            state: { data: props.data, category: props.category },\n          }}\n        >\n          <img\n            className=\"poster\"\n            src={`https://image.tmdb.org/t/p/w200/${props.data.poster_path}`}\n          />\n          <span className=\"rate\">\n            <span className=\"star-icon\">&#9733;</span> {props.data.vote_average}\n            /10\n          </span>\n        </Link>\n      </div>\n      <div className=\"info\">\n        <span className=\"title\">\n          {props.category === \"movie\"\n            ? props.data.original_title\n            : props.data.original_name}\n        </span>\n        <span className=\"year\">{year}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/card.component\";\n\nimport \"./list.styles.css\";\n\nconst List = (props) => {\n  return (\n    <div className=\"list-container\">\n      {props.data.map((d) => {\n        return <Card key={d.id} data={d} category={props.category} />;\n      })}\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport List from \"../list/list.component\";\n\nimport \"./section.styles.css\";\n\nconst Section = (props) => {\n  return (\n    <div className=\"section-container\">\n      <h2>{props.title}</h2>\n      <div className=\"section-content\">\n        <List data={props.data} category={props.category} />\n      </div>\n    </div>\n  );\n};\n\nexport default Section;\n","import React, { Fragment } from \"react\";\nimport Section from \"../../components/section/section.component\";\n\nconst MoviesPage = (props) => {\n  return (\n    <Fragment>\n      <Section\n        title=\"Now Playing\"\n        data={props.data.now_playing_movies}\n        category=\"movie\"\n      />\n      <Section\n        title=\"Upcoming Movies\"\n        data={props.data.upcoming_movies}\n        category=\"movie\"\n      />\n      <Section\n        title=\"Popular Movies\"\n        data={props.data.popular_movies}\n        category=\"movie\"\n      />\n    </Fragment>\n  );\n};\n\nexport default MoviesPage;\n","import React from \"react\";\nimport \"./detail.css\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass Detail extends React.Component {\n  constructor() {\n    super();\n  }\n\n  state = {\n    id: \"\",\n    info: {},\n    video_info: {},\n    year: \"\",\n    runtime_hr: -1,\n    runtime_min: 0,\n    genres: [],\n    video_key: \"\",\n    title: \"\",\n    countries: [],\n  };\n\n  componentDidMount() {\n    let category = this.props.location.state.category;\n    console.log(\"movie data: \", this.props.location.state.data);\n    // console.log(this.props.location.state.category);\n    this.setState(\n      {\n        id: this.props.location.state.data.id,\n      },\n      () => {\n        Promise.all([\n          // For movie info\n          fetch(\n            `https://api.themoviedb.org/3/${category}/${this.state.id}?api_key=${API_KEY}&language=en-US`\n          ).then((data) => data.json()),\n          // For video teaser\n          fetch(\n            `https://api.themoviedb.org/3/${category}/${this.state.id}/videos?api_key=${API_KEY}&language=en-US`\n          ).then((data) => data.json()),\n        ]).then((allResponses) =>\n          this.setState(\n            {\n              info: allResponses[0],\n              video_info: allResponses[1],\n            },\n            () => {\n              console.log(\"after fetched, movie_info: \", this.state.info);\n              console.log(\"after fetched, video_info: \", this.state.video_info);\n\n              // Create title, year, runtime, genres\n              let title = \"\";\n              let year = \"\";\n              let total_runtime_min = -1;\n              let genres = [];\n              let video_key = \"\";\n\n              // movie: info.production_countries[0].iso_3166_1\n              // tv: info.origin_country or production_companies[0].origin_country\n              let countries = [];\n\n              // Set info according to category\n              if (category === \"movie\") {\n                title = this.state.info.original_title;\n                year = this.state.info.release_date.split(\"-\", 1);\n                total_runtime_min = this.state.info.runtime;\n                this.state.info.production_countries.forEach((c) =>\n                  countries.push(c.iso_3166_1)\n                );\n\n                // console.log(\"after push, movie countries: \", countries);\n              } else {\n                title = this.state.info.original_name;\n                year = this.state.info.first_air_date.split(\"-\", 1);\n                total_runtime_min = this.state.info.episode_run_time[0];\n                countries = this.state.info.origin_country;\n                // console.log(\"after push, tv country: \", countries);\n              }\n\n              // Set genres and video\n              genres = this.state.info.genres.map((g) => g.name);\n\n              if (this.state.video_info.results.length > 0) {\n                video_key = this.state.video_info.results[0].key;\n              } else {\n                video_key = \"\";\n              }\n\n              // Handle runtime format\n              let hour = Math.floor(total_runtime_min / 60);\n              let min = Math.floor(total_runtime_min % 60);\n\n              // Update state\n              this.setState({\n                year: year,\n                runtime_hr: hour,\n                runtime_min: min,\n                genres: genres,\n                video_key: video_key,\n                title: title,\n                countries: countries,\n              });\n            }\n          )\n        );\n      }\n    );\n  }\n\n  openTab = (tabName) => {\n    const gridContent = document.querySelectorAll(\".detail_grid_content\");\n\n    // Handle contents\n    for (let i = 0; i < gridContent.length; i++) {\n      gridContent[i].classList.remove(\"show\");\n    }\n    document.getElementById(tabName).classList.add(\"show\");\n  };\n\n  addDefaultSrc = (e) => {\n    e.target.src =\n      \"https://dummyimage.com/600x400/000/ffffff.png&text=Image+Not+Found\";\n  };\n  render() {\n    return (\n      <div\n        style={{\n          marginTop: \"50px\",\n        }}\n        className=\"detail_container\"\n      >\n        <div className=\"detail_poster_container\">\n          <div className=\"detail_poster_inner_container\">\n            <img\n              src={`https://image.tmdb.org/t/p/original/${this.state.info.poster_path}`}\n              className=\"detail_poster\"\n            />\n          </div>\n        </div>\n        <div className=\"detail_main_container\">\n          <div className=\"detail_main_inner_container\">\n            <div className=\"detail_info\">\n              <h2>{this.state.title}</h2>\n              <div className=\"detail_sub_info\">\n                {this.state.year} &bull;\n                {this.state.runtime_hr !== 0 &&\n                  `${this.state.runtime_hr}hr`}{\" \"}\n                {this.state.runtime_min !== 0 && `${this.state.runtime_min}min`}\n                &bull;\n                <button className=\"detail_button\">\n                  <a\n                    href={`https://www.imdb.com/title/${this.state.info.imdb_id}`}\n                    target=\"_blank\"\n                  >\n                    IMDB\n                  </a>\n                </button>\n              </div>\n              <div className=\"detail_overview\">\n                <p>{this.state.info.overview}</p>\n              </div>\n              <div className=\"detail_grid_container\">\n                {/* Two columns */}\n                <div className=\"detail_tab_row\">\n                  <div\n                    className=\"detail_tab_col show\"\n                    onClick={(e) => {\n                      this.openTab(\"b1\");\n                      e.target.parentNode.lastChild.classList.remove(\"show\");\n                      e.target.classList.add(\"show\");\n                    }}\n                  >\n                    Video\n                  </div>\n                  <div\n                    className=\"detail_tab_col\"\n                    onClick={(e) => {\n                      this.openTab(\"b2\");\n                      e.target.parentNode.firstChild.classList.remove(\"show\");\n                      e.target.classList.add(\"show\");\n                    }}\n                  >\n                    Production\n                  </div>\n                </div>\n                <div className=\"detail_grid_content show\" id=\"b1\">\n                  <h2>Teaser videos</h2>\n                  <iframe\n                    width=\"500\"\n                    height=\"300\"\n                    src={`https://www.youtube.com/embed/${this.state.video_key}`}\n                  ></iframe>\n                </div>\n                <div className=\"detail_grid_content\" id=\"b2\">\n                  <div className=\"detail_company_container\">\n                    <h2>Companies</h2>\n                    <div className=\"detail_companies\">\n                      {this.state.info.production_companies &&\n                        this.state.info.production_companies.map((c) => {\n                          return (\n                            <div className=\"detail_company\" key={c.id}>\n                              <div className=\"detail_logo_container\">\n                                <img\n                                  src={`https://image.tmdb.org/t/p/original/${c.logo_path}`}\n                                  onError={this.addDefaultSrc}\n                                  className=\"detail_logo\"\n                                />\n                              </div>\n                              <p className=\"detail_company_name\">{c.name}</p>\n                            </div>\n                          );\n                        })}\n                    </div>\n                  </div>\n                  <div className=\"detail_country_container\">\n                    <h2>Countries</h2>\n                    <div className=\"detail_country_img_container\">\n                      {this.state.countries.map((c) => {\n                        return (\n                          <img\n                            src={`https://www.countryflags.io/${c}/shiny/64.png`}\n                            alt={c}\n                          />\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Detail;\n","import React, { Fragment } from \"react\";\nimport Section from \"../../components/section/section.component\";\n\nconst TvPage = (props) => {\n  console.log(\"Airing TV in TV page component: \", props.data.air_tv);\n  return (\n    <Fragment>\n      <Section\n        title=\"Top Rated Shows\"\n        data={props.data.top_rated_tv}\n        category=\"tv\"\n      />\n      <Section\n        title=\"Poplular Shows\"\n        data={props.data.popular_tv}\n        category=\"tv\"\n      />\n      <Section title=\"Airing Today\" data={props.data.air_tv} category=\"tv\" />\n    </Fragment>\n  );\n};\n\nexport default TvPage;\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\nimport \"./nav.style.css\";\n\nconst handleClick = (e) => {\n  const elems = document.querySelector(\".activated\");\n\n  // Remove classname from the activated element\n  if (elems !== null) {\n    elems.classList.remove(\"activated\");\n  }\n  e.target.classList.add(\"activated\");\n};\nconst Nav = () => {\n  return (\n    <header className=\"nav-list-container\" onClick={handleClick}>\n      <ul className=\"nav-ul\">\n        <li>\n          <Link to=\"/netflix_clone/\" className=\"nav-activated\">\n            Movies\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/netflix_clone/tv\">TV</Link>\n        </li>\n        <li>\n          <Link to=\"/netflix_clone/search\">Search</Link>\n        </li>\n      </ul>\n    </header>\n  );\n};\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport MoviesPage from \"./pages/movies/moviesPage\";\nimport DetailPage from \"./pages/detail/detail\";\nimport TvPage from \"./pages/tv/tvPage\";\nimport Nav from \"./components/nav/nav.component\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      now_playing_movies: [],\n      upcoming_movies: [],\n      popular_movies: [],\n      top_rated_tv: [],\n      popular_tv: [],\n      air_tv: [],\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch(\n        `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/movie/upcoming?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/tv/top_rated?api_key=${API_KEY}&language=en-US&page=1`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/tv/popular?api_key=${API_KEY}&language=en-US&page=1`\n      ).then((data) => data.json()),\n      fetch(\n        `https://api.themoviedb.org/3/tv/airing_today?api_key=${API_KEY}&language=en-US&page=1`\n      ).then((data) => data.json()),\n    ]).then((allResponses) => {\n      this.setState({\n        now_playing_movies: allResponses[0].results,\n        upcoming_movies: allResponses[1].results,\n        popular_movies: allResponses[2].results,\n        top_rated_tv: allResponses[3].results,\n        popular_tv: allResponses[4].results,\n        air_tv: allResponses[5].results,\n      });\n    });\n  }\n\n  showMoviePage = () => {\n    return <MoviesPage data={this.state} />;\n  };\n\n  showTvPage = () => {\n    return <TvPage data={this.state} />;\n  };\n\n  showSearchPage() {\n    return <h1 className=\"temp-text\">Search Page coming soon...</h1>;\n  }\n\n  // showDetail() {\n  //   return <DetailPage />;\n  // }\n\n  showNotFound() {\n    console.log(\"not found called\");\n    return <h1 className=\"temp-text\">404 Page</h1>;\n  }\n\n  render() {\n    // const { now_playing_movies, upcoming_movies, popular_movies } = this.state;\n    return (\n      <div className=\"App\">\n        <Router>\n          <Nav></Nav>\n          <Switch>\n            <Route\n              path=\"/netflix_clone/\"\n              component={this.showMoviePage}\n              exact={true}\n            />\n            <Route path=\"/netflix_clone/tv\" component={this.showTvPage} />\n            <Route\n              path=\"/netflix_clone/search\"\n              component={this.showSearchPage}\n            />\n            <Route path=\"/detail\" component={DetailPage} />\n            <Route component={this.showNotFound} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}